import tkinter as tk
from tkinter import ttk as ttk
from tkinter import messagebox
#from tkintertable.Tables import TableCanvas
from tkintertable import TableCanvas, TableModel
import sqlite3 
from busqproy import Busqproywin
from gendciturl import Dictofindsel
from dictsit import elem_sitio
#from sitio_backend import 

#######################################################
# 
# Sitio.py
# Python implementation of the Class Sitio
# Generated by Enterprise Architect
# Created on:      22-mar.-2019 8:06:16
# Original author: acfde
# 
####################################################################################
#import Oferta
#import Inscripcion
import enumeradores
import LabelInput as li
from  sitio_backend import *
from proyecto import Proyecto
import datetime
from StartDriveApi import ViewDrive, main

class Sitio(tk.LabelFrame):
    """Clase para definir los sitios
    """
    #m_Oferta= Oferta()

    #m_Inscripcion= Inscripcion()

    #m_Lenguaje= Lenguaje()

    cantsitios = 0
    tempsitio={}
    tempidiomas=[]
    temptipos=[]


    def __init__(self, raiz,nombre,url,lenguajes,tipositio,cantnivel):
        super(Sitio,self).__init__()
        Sitio.cantsitios+=1
        self.nomsitio=nombre
        self.url=url
        self.lenguajes=lenguajes # lista de lenguajes posibles
        self.cantnivel=cantnivel # cantidades de nivel que se tienen
        self.nomnivel=[]         # nombre de cada nivel
        self.costoXnivel=[]       # costo en punts de cada nivel
        self.ofertasXnivel=[]     # cantidad de ofertas x cada nivel

        self.cantplansuscrip=0
        self.nomplansuscrip=[]
        self.costoplansuscrip=[]
        self.ofetraplansuscrip=[]

        self.costoXofertas =0
        self.tipositio=tipositio
    
   
        self.sitio={'idsitio':tk.IntVar() ,"nomsitio":tk.StringVar(),"url":tk.StringVar(),"pais":tk.StringVar(),
        'creacion':tk.StringVar(), 'nivelesdemerito':tk.IntVar(), 'nivelesmembresia':tk.IntVar(),'urlproy': tk.StringVar(),
        'nombusq': tk.StringVar(),'clavebusq':tk.StringVar(),'notas':tk.StringVar(),'xdict':tk.StringVar()}

        self.sitioval={'idsitio':0 ,"nomsitio":'',"url":"www.XXXXXX.com","pais":'USA',
        'creacion':'01/01/2019', 'nivelesdemerito':0, 'nivelesmembresia':1,'urlproy': "www.XXXXXX.com/projects",
        'nombusq': "raulrfa", "clavebusq":"Karpov75%",'notas':"",'xdict':''}

        
        """ 
        for value in self.sitio:
            if type(self.sitio.values)==type(tk.StringVar()):
                self.sitio.values=StringVar.set('')
            else:
                self.sitio.values=tk.IntVar.set(0)"""
        #print (list(self.sitio.keys()))
        #print(list(self.sitio.values()))

        self.sitidi={"idsitio":tk.IntVar(),"ididioma":tk.IntVar()}
        
        self.show_sitio_frame()
        self.muestrasitios(editsitiosdb())
        self.proy=Proyecto(self,-1)
        self.proy.muestraproyectos(self.frlistproy,editprelproyectosdb(0))
       
        self.muestra_but_ctrl()
        self.muestra_checkbut()
        self.muestra_edi()

    def show_sitio_frame(self):
        #self.graf = tk.LabelFrame
        #self.graf.configure(self,text='Edicion de Sitios',bg='gray')
        self.master=raiz

        #muestra las frames de la lista de sitio y los botnes        
        self.frgridsit = tk.LabelFrame(self,bg='gray',text='Sitios')
        self.frgridsit.pack(side=tk.LEFT, fill=tk.Y)
        self.frbutsit = tk.Frame(self,bg='gray')
        self.frbutsit.pack(side=tk.LEFT)   
        self.frlistsit = tk.Frame(self.frgridsit,bg='cyan')
        self.frlistsit.pack(side=tk.TOP)
        self.frlistproy = tk.Frame(self.frgridsit,bg='lightyellow')
        self.frlistproy.pack(side=tk.TOP)
        
       
        self.fredit= tk.Frame(self,bg="cyan")
        self.fredit.pack(side=tk.LEFT, fill=tk.Y, expand=1)   
        self.frcheckbut= tk.Frame(self,bg='gray')
        self.frcheckbut.pack(side=tk.LEFT)      
        self.frbut=tk.Frame(self,bg='yellow')
        self.pack(side=tk.LEFT)
        self.frbutidi =tk.LabelFrame(self.frcheckbut,bg='blue',text='Idiomas',width=25)
        self.frbutidi.pack(side=tk.TOP,fill=tk.Y)        
        self.frbutip =tk.LabelFrame(self.frcheckbut,bg='lightyellow',text="Tipos", width=25)
        self.frbutip.pack(side=tk.TOP,fill=tk.Y)

        self.frbutarea =tk.LabelFrame(self.frcheckbut,bg='lightgreen',text="Area de Trabajo", width=25)
        self.frbutarea.pack(side=tk.TOP,fill=tk.Y)
        self.frbuthab =tk.LabelFrame(self.frcheckbut,bg='lightyellow',text="Habilidades", width=25)
        self.frbuthab.pack(side=tk.TOP,fill=tk.Y)
        self.frediprelproy =tk.LabelFrame(self,bg='lightyellow',text="Proyecto y Oferta Preliminar", width=25)
        self.frediprelproy.pack(side=tk.LEFT,fill=tk.Y)
        self.frediproy=tk.LabelFrame(self,bg='lightyellow',text="Proyecto y Oferta", width=25)
        self.frediproy.pack(side=tk.LEFT,fill=tk.Y)      
        self.freditbut= tk.Frame(self.fredit,bg='gray')
        #self.freditbut.pack()
        
        self.cb_idi=[] # lista de check but
        self.iv_idi=[] # lista de IntVar
        self.cb_tip = [] # lista de check but para tipos
        self.iv_tip = [] # lista de IntVar
        self.cb_area =[] # areas de trabajo
        self.iv_area =[] # areas de trabajo
        self.cb_hab =[]  # habilidades
        self.iv_hab =[] # areas de trabajo
       
  
        
   

    def muestra_checkbut(self):
        for leng in range(1,1+len(enumeradores.Idiomas)):
            self.iv_idi.append(tk.IntVar())
            self.cb_idi.append(ttk.Checkbutton(self.frbutidi, name=str(leng) ,text=enumeradores.Idiomas(leng).name
            , variable=self.iv_idi[leng-1], command=self.cbclick))
            self.cb_idi[leng-1].state(['!alternate'])
            self.cb_idi[leng-1].grid(row=leng,column=0,sticky=tk.W+tk.E)
        for leng in range(1,1+len(enumeradores.TipoProyecto)):
            self.iv_tip.append(tk.IntVar())
            self.cb_tip.append(ttk.Checkbutton(self.frbutip, name=str(leng) ,text=enumeradores.TipoProyecto(leng).name
            , variable=self.iv_tip[leng-1], command=self.cbclick))
            self.cb_tip[leng-1].state(['!alternate'])
            self.cb_tip[leng-1].grid(row=leng,column=0, sticky=tk.W+tk.E)
        for leng in range(1,1+len(enumeradores.AreasTrab)):
            self.iv_area.append(tk.IntVar())
            self.cb_area.append(ttk.Checkbutton(self.frbutarea, name=str(leng) ,text=enumeradores.AreasTrab(leng).name
            , variable=self.iv_area[leng-1], command=self.cbclick))
            self.cb_area[leng-1].state(['!alternate'])
            self.cb_area[leng-1].grid(row=leng,column=0,sticky=tk.W+tk.E)
        for leng in range(1,1+len(enumeradores.Habilidades)):
            self.iv_hab.append(tk.IntVar())
            self.cb_hab.append(ttk.Checkbutton(self.frbuthab, name=str(leng) ,text=enumeradores.Habilidades(leng).name
            , variable=self.iv_hab[leng-1], command=self.cbclick))
            self.cb_hab[leng-1].state(['!alternate'])
            self.cb_hab[leng-1].grid(row=leng,column=0, sticky=tk.W+tk.E)
    
    def muestra_edi(self):
       #self.sitio['nomsitio'].set('bbbb')
       li.LabelInput(self.fredit,'Nombre del Sitio', input_var=self.sitio['nomsitio']).grid(row=1, column=1)
       li.LabelInput(self.fredit,'Url', input_var=self.sitio['url']).grid(row=2, column=1)
       li.LabelInput(self.fredit,"Pa√≠s de Origen",input_class=ttk.Combobox, input_var=self.sitio['pais'],
       input_args={"values": ["Argentina", "Australia", "USA","Francia", "Alemania"]}).grid(row=3,column=1)
       li.LabelInput(self.fredit,'Niveles de Merito', input_var=self.sitio['nivelesdemerito']).grid(row=4,column=1)
       li.LabelInput(self.fredit,"Nivel de Suscripcion",input_class=ttk.Combobox, input_var=self.sitio['nivelesmembresia'],
       input_args={"values": ["0", "1", "2","3", "4"]}).grid(row=5,column=1)
       li.LabelInput(self.fredit,'URL de Busquedad de Proyectos', input_var=self.sitio['urlproy']).grid(row=6,column=1)
       li.LabelInput(self.fredit,'Nombre Buquedad', input_var=self.sitio['nombusq']).grid(row=7,column=1)
       li.LabelInput(self.fredit,'Clave de Busquedad', input_var=self.sitio['clavebusq']).grid(row=8,column=1)
       li.LabelInput(self.fredit,'Fecha Creacion', input_var=self.sitio['creacion']).grid(row=9,column=1)
       li.LabelInput(self.fredit,'Diccionario Busquedad', input_var=self.sitio['xdict']).grid(row=9,column=1)
       self.sitio['notas'].set(li.LabelInput(self.fredit,'Notas', input_class=tk.Text,input_args={"height": 10,"width": 25}).grid(row=10,column=1))
       
       
  
    def muestra_but_ctrl(self):
        self.butnuevo= tk.Button(self.frbutsit, bg='cyan',text= 'Nuevo',command=self.nuevo)
        self.butnuevo.pack(side=tk.TOP, pady=10)
        self.buteditar= tk.Button(self.frbutsit, bg='cyan',text= 'Editar',command=self.editar)
        self.buteditar.pack(side=tk.TOP, pady=10)
        self.butlimpiar= tk.Button(self.frbutsit, bg='cyan',text= ' Limpiar',command=self.limpiar)
        self.butlimpiar.pack(side=tk.TOP, pady=10) 
        self.butlborrar= tk.Button(self.frbutsit, bg='cyan',text= 'Borrar',command=self.borrar)
        self.butlborrar.pack(side=tk.TOP, pady=10) 
        self.butsalvar= tk.Button(self.frbutsit, bg='cyan',text= ' Salvar',command=self.salvar)
        self.butsalvar.pack(side=tk.TOP, pady=10) 
        self.butbuscar= tk.Button(self.frbutsit, bg='gray',text= ' Buscar Proy',command=self.buscar)
        self.butbuscar.pack(side=tk.TOP, pady=10) 
        self.butestad= tk.Button(self.frbutsit, bg='gray',text= ' Estadisticas',command=self.estadistica)
        self.butestad.pack(side=tk.TOP, pady=10) 
        self.butanalizar= tk.Button(self.frbutsit,bg='gray', text= ' Analizar',command=self.analizar)
        self.butanalizar.pack(side=tk.TOP, pady=10) 
        self.butactualizar= tk.Button(self.frbutsit,bg='gray', text= ' Actualizar',command=self.actualizar)
        self.butactualizar.pack(side=tk.TOP, pady=10) 
        self.butprelproy= tk.Button(self.frbutsit,bg='yellow', text= 'Preliminar',command=self.creanuevoprel)
        self.butprelproy.pack(side=tk.TOP, pady=10) 
        self.butsalvarprelproy= tk.Button(self.frbutsit, bg='yellow',text= 'Salvar Preliminar')
        self.butsalvarprelproy.pack(side=tk.TOP, pady=10) 
        self.buteliminarprelproy= tk.Button(self.frbutsit, bg='yellow',text= 'Eliminar Preliminar')
        self.buteliminarprelproy.pack(side=tk.TOP, pady=10) 
        self.butproyecto= tk.Button(self.frbutsit, bg='green',text= ' Proyecto')
        self.butproyecto.pack(side=tk.TOP, pady=10)
        self.butsalvarproyecto= tk.Button(self.frbutsit, bg='green',text= ' Salvar Proyecto',command=self.salvarproy)
        self.butsalvarproyecto.pack(side=tk.TOP, pady=10)
        self.buteliminarproyecto= tk.Button(self.frbutsit, bg='green',text= ' Salvar Proyecto',command=self.eliminarproy)
        self.buteliminarproyecto.pack(side=tk.TOP, pady=10)
        self.enablebutpreliminares()
        
   
    def enablebutpreliminares(self):
        self.butnuevo.configure(bg='red')
        self.butsalvarprelproy.state=tk.NORMAL
        self.butprelproy.state=tk.NORMAL        
        self.buteliminarprelproy.state=tk.NORMAL
        self.butproyecto.state = tk.DISABLED
        self.butsalvarproyecto.state = tk.DISABLED
        self.buteliminarproyecto.state = tk.DISABLED

    def enablebutproyectos(self):
        self.butprelproy.state=tk.DISABLED
        self.butsalvarprelproy.state=tk.DISABLED
        self.buteliminarprelproy.state=tk.DISABLED
        self.butproyecto.state = tk.NORMAL
        self.butsalvarproyecto.state = tk.NORMAL
        self.buteliminarproyecto.state = tk.NORMAL  

    
    def show(self):
        pass
    def exit(self):
        pass

    def selectItem(self, event, arg):   # como argumento se pasa la lista de sitios
        curItem = self.gridsitio.focus()
        idsitio=self.gridsitio.item(curItem)['values'][0]
        fila=arg[int(curItem)-1]  # los enumeradores y bd el primer rticulo tiene id 1
        f=0
        for val in self.sitio.values():
            val.set(fila[f])
            f+=1
        setIdioma=setTipos=setArea=setHab=[]
        setIdioma=muchosUnsitio(idsitio,enumeradores.Idiomas,setIdioma,0) 
        setTipos=muchosUnsitio(idsitio,enumeradores.TipoProyecto,setTipos,0) 
        setArea=muchosUnsitio(idsitio,enumeradores.AreasTrab,setArea,0) 
        setHab=muchosUnsitio(idsitio,enumeradores.Habilidades,setHab,0) 

        for i in range(1,len(self.cb_idi)+1):
            if i in setIdioma: 
                self.iv_idi[i-1].set(1)
            else:
                self.iv_idi[i-1].set(0)                
        for i in range(1,len(self.cb_tip)+1):
            if i in setTipos: 
                self.iv_tip[i-1].set(1)
            else:
                self.iv_tip[i-1].set(0)  
        for i in range(1,len(self.cb_area)+1):
            if i in setArea: 
                self.iv_area[i-1].set(1)
            else:
                self.iv_area[i-1].set(0)  
        for i in range(1,len(self.cb_hab)+1):
            if i in setHab:
                self.iv_hab[i-1].set(1)
            else:
                self.iv_hab[i-1].set(0)  
        #self.actualizar(idsitio)
        self.proy.changemaster()
           
    def creanuevoprel(self):
        self.frediproy.pack_forget
        self.proy.nomsitio=self.nomsitio 
        self.proy.idsitio=self.sitio['idsitio'].get()
        self.butsalvarprelproy.state=tk.NORMAL
        self.butsalvarprelproy.bind('<Button-1>',self.proy.salvarprelproy)
        self.butproyecto.state=tk.NORMAL
        self.butproyecto.bind('<Button-1>',self.proy.muestra_proy)
        self.proy.newprelproy()

    def muestrasitios(self,listasitios):         
        self.Titgridsitio = tk.Label(self.frlistsit, text="Sitios Registrados", font=("Arial",16)).grid(row=0, columnspan=11)
        # create Treeview with 3 columns
        cols = ('Orden', 'Nombre', 'URL', 'Pa√≠s','√áreaci√≥n','NivMerito', 'NivMem','URLProy','','','','')
       
        self.gridsitio = ttk.Treeview(self.frlistsit, columns=cols, displaycolumns=(0,1,2,3,4,5,6,7), padding=3, show='headings')
        #gridsitio[columns]=('size',width=8,anchor='center')
        for i, (idi,name,url,pais,crea,nivmer,nivmemb,urlp,c1,c2,c3,c4) in enumerate(listasitios, start=1):
            self.gridsitio.insert("", "end", i,values=(idi, name,url,crea,nivmer,nivmemb,urlp))
        # set column headings
        for col in cols:
            if  cols.index(col) == 0:
                self.gridsitio.column(col,width=10,anchor=tk.W)
            elif cols.index(col) in (5,6):
                self.gridsitio.column(col,width=35,anchor=tk.W)
            else:
                self.gridsitio.column(col,width=100,anchor=tk.W)
            
            self.gridsitio.heading(col, text=col)    
        self.gridsitio.grid(row=1, column=0, columnspan=11)
        #self.gridsitio.bind('<Button-1>', self.selectItem)
        self.gridsitio.bind('<<TreeviewSelect>>', lambda event, arg=listasitios: self.selectItem(event,arg))   
        self.butmostrarofertas= tk.Button(self.frbutsit,bg='magenta', text= 'Ofertas',command=self.mostrarofertas)
        self.butmostrarofertas.pack(side=tk.TOP, pady=10)

        
 

    def nuevo(self):
        self.limpiar()
        last=nuevositiodb()
        self.sitioval['idsitio']=last
        print(self.sitioval['idsitio'])
        for key,val in self.sitio.items():
            print(key,'Defecto: ',self.sitioval[key])
            val.set(self.sitioval[key]) # toma el valor por defecto
        #self.muestrasitios(self,editsitiosdb())
        #self.gridsitio.selection_set(last-1)
        Sitio.cantsitios+=1


    def eliminarproy(self)   :
        pass

    def salvarproy(self):
        pass

       
         
       
        
                
    def editar(self):
        pass      
        


    def actualizar(self,ord):
        if self.sitiochanged==True:
            listasitios=editsitiosdb()
            for i, (idi,name,url,pais,crea,nivmer,nivmemb,urlp,c1,c2,c3,c4) in enumerate(listasitios, start=1):
                self.gridsitio.delete(i)
                self.gridsitio.insert("", "end", i,values=(idi, name,url,crea,nivmer,nivmemb,urlp))
        """" Esto estaba pero parede no se usa
            self.proy.muestraproyectos(self.frlistproy, editprelproyectosdb(0) ) 
        elif self.proy.Master.get()==True: 
            # el defecto es false, se muestran todos los proyectos
            self.proy.llenagrid(editprelproyectosdb(ord)) """

    
    
    


        

    def salvar(self):
        lista=[]
        listaerror =[]
        for sel in self.sitio.values():
            try: lista.append(sel.get())
            except:
                listaerror.append(type(sel))
        print('lerror: ',listaerror)
        print(lista)
        id=updatesitio(lista)
        if id!=lista[0]: # no hay problemas se retorno el mismo rowguid
            messagebox.showerror('Error','No se pudo salvar el sitio')
            return
        else:
            self.gridsitio.item(self.gridsitio.focus(),value=lista)
        setIdioma=set()
        setTipos=set()
        setArea=set()
        setHab=set()
        # Los enumeradores parten de 1, el checkbutton es un arreglo que parte de 0
        for i in range(1,len(self.cb_idi)+1):  
            if self.cb_idi[i-1].instate(['selected']) : setIdioma.add(i) 
        for i in range(1,len(self.cb_tip)+1):
            if self.cb_tip[i-1].instate(['selected']) : setTipos.add(i) 
        for i in range(1,len(self.cb_area)+1):
            if self.cb_area[i-1].instate(['selected']) : setArea.add(i) 
        for i in range(1,len(self.cb_hab)+1):
            if self.cb_hab[i-1].instate(['selected']) : setHab.add(i)
        muchosUnsitio(id,enumeradores.Idiomas,setIdioma,1) 
        muchosUnsitio(id,enumeradores.TipoProyecto,setTipos,1) 
        muchosUnsitio(id,enumeradores.AreasTrab,setArea,1) 
        muchosUnsitio(id,enumeradores.Habilidades,setHab,1)
        self.sitiochanged=True
  
    def limpiar(self):
        for leng in range(1,1+len(enumeradores.Idiomas)):
            self.iv_idi[leng-1].set(0)
        for leng in range(1,1+len(enumeradores.TipoProyecto)):
            self.iv_tip[leng-1].set(0)
        for leng in range(1,1+len(enumeradores.AreasTrab)):
            self.iv_area[leng-1].set(0)
        for leng in range(1,1+len(enumeradores.Habilidades)):
            self.iv_hab[leng-1].set(0)

        

        for val in self.sitio.values():
            if type(val)==tk.IntVar:
                val.set(0)
            else:
                val.set('')

        print('limpiar')
                
    def borrar(self):
        curItem= self.gridsitio.selection() 
        #curItem2= self.gridsitio.focus()
        idsitio=self.gridsitio.item(curItem)['values'][0]
        line=self.gridsitio.index(curItem) 
        messagebox.answer = messagebox.askyesnocancel("Atenci√≥n!","¬øDesea borrar el sitio no. {}".format(idsitio))
        if messagebox.answer:           
            self.gridsitio.selection_set(line)
            self.gridsitio.delete(curItem)
            deletesitiodb(idsitio)
            Sitio.cantsitios=-1
            
            muchosUnsitio(idsitio,enumeradores.Idiomas,set(),1) 
            muchosUnsitio(idsitio,enumeradores.TipoProyecto,set(),1) 
            muchosUnsitio(idsitio,enumeradores.AreasTrab,set(),1) 
            muchosUnsitio(idsitio,enumeradores.Habilidades,set(),1)
            #muestrasitios(editsitiosdb())

    def estadistica(self):
        messagebox.showinfo('Estadisticas', 'Cantidad de sitios: {}'.format(Sitio.cantsitios))

    def mostrarofertas(self):
        vd = tk.Toplevel(bg='gray')
        #TODO pr que no reconoce las Control booleanas cdo de llama a una pagina inde[pendiente
        gd=ViewDrive(vd,main(),1)
        #gd=ViewDrive(raiz,None,1)
        gd.gui_butmenu()
        gd.gui_oferta_guardada()
        #gd.cambiartit()
        raiz2.mainloop()
 
    def buscar(self):
        if self.sitio!=None:
           setIdioma=setTipos=setArea=setHab=[]          
           #muchosUnsitio(self.sitio['idsitio'],enumeradores.TipoProyecto,setTipos,1) 
           #muchosUnsitio(self.sitio['idsitio'],enumeradores.AreasTrab,setArea,1) 
           habilidades=muchosUnsitio(self.sitio['idsitio'].get(),enumeradores.Habilidades,setHab,0) 
           idioma= muchosUnsitio(self.sitio['idsitio'].get(),enumeradores.Idiomas,setIdioma,0) 
           bp=Busqproywin(1,self.sitio['idsitio'].get(),self.sitio['nomsitio'].get(),idioma,habilidades,dictsitio.elem_sitio(self.nomsitio),self.sitio['urlproy'].get(),self.sitio['nombusq'].get(),self.sitio['clavebusq'],'freebd.db')
        
    def analizar(self):
        #def __init__(self,sitio,url,dictini,xdictedit,tipstruct,marked=[]): definicion actual de analizar
        ds=Dictofindsel(self.nomsitio,self.sitio['urlproy'].get(),elem_sitio('Workana'),elem_sitio(self.sitio['nomsitio']),self.tipositio)
    def cbclick(self):
        pass

    
  

if __name__ == '__main__':
    raiz = tk.Tk()
    b=Sitio(raiz,'Workana','workana.com',[],[],3)
    #b.muestra_checkbut()
    raiz.mainloop()    